## GLOBAL CONFIGURATION
[LogWatcher]

# Enable debug messages.
#debug = boolean(default=False)

# Wait the given amount of seconds at startup.
# (wait for potential dependencies to be initialized)
#delay = integer(min=0, max=300, default=0)

# Includes files matching the given glob(s)
#includes = string_list(min=0, default=list())
includes = /etc/logwatcherd.d/*.conf,


## WATCHERS

# A sample watcher
#[SampleWatcher]

# Whether to enable this watcher or not.
#enable = boolean(default=True)

# Whether to output data filter matches.
#verbose = boolean(default=False)

# Whether this watcher should be synchronous.
# A synchronous watcher will silently block until its filters/consumers
# are done with the producer data before continuing its business.
# A non-synchronous watcher should have its blocking and timeout parameters
# set appropriately (see below).
# Note that each non-synchronous watcher comes with an additional "co-worker"
# thread (thus resulting in two instead of one thread per watcher).
#synchronous = boolean(default=True)

# Whether this (non-synchronous) watcher should be blocking.
# A blocking watcher will verbosely wait until its filters/consumers
# are done with the producer data before continuing its business.
# A non-blocking watcher will verbosely discard new producer data as long
# as its filters/consumers are not done with previous data fed to them.
#blocking = boolean(default=True)

# Data feed timeout.
# How long a non-synchronous watcher should wait for its filters/consumers
# to be done with the producer data.
# On timeout, a blocking watcher will verbosely keep waiting;
# a non-blocking watcher will move on and verbosely discard new data.
#timeout = float(min=0.001, max=60.0, default=5.0)

# Producer plug-in and parameters.
# A producer is responsible for producing data that may be useful.
# There must be one producer per watcher (and one only).
# Paremeters must be specified using a URL(encoded) query string
#producer = string(min=1)
#producer = <producer-plugin>[?<argument>=<value>[&<argument>=<value>[&...]]]
#producer = Tail?file=/var/log/auth.log

# Filter plug-in(s) and parameters.
# A filter is responsible for extracting meaningful data from the producer
# and producing data usable by the consumers.
# There can be zero to many filters per watcher.
# If no filter is defined, producer data are forwarded "as-is".
# Paremeters must be specified using a URL(encoded) query string
#filters = string_list(min=0, default=list())
#filters = <filter-plugin>[?<argument>=<value>[&<argument>=<value>[&...]]],
#filters = Grep?pattern=sshd.*Invalid user H from (%{ip})&ignorecase&group=1,

# Conditioner plug-in(s) and parameters.
# A conditioner is responsible for conditioning data output from the filter.
# It can either interrupt further processing by returning no data or modify
# the original filtered data.
# There can be zero to many conditioners per watcher.
# Paremeters must be specified using a URL(encoded) query string
#conditioners = string_list(min=0, default=list())
#conditioners = <conditioner-plugin>[?<argument>=<value>[&<argument>=<value>[&...]]],
#conditioners = Sed?pattern=^192\.168\.0\.&not,

# Consumer plug-in(s) and parameters.
# A consumer is responsible for taking proper action based on the data
# provided to it (rule name, producer raw data and filter output data).
# There must be at least one consumer per watcher.
# Paremeters must be specified using a URL(encoded) query string
#consumers = string_list(min=1)
#consumers = <consumer-plugin>[?<argument>=<value>[&<argument>=<value>[&...]]],
#consumers = Write?file=/proc/net/xt_recent/IPS_DROP, Mail?recipient=root@example.org,
