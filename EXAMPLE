Log Watcher Daemon (logwatcherd)
================================

We will demonstrate here how to transform the Log Watcher Daemon (logwatcherd)
into a simple Intrusion Prevention System (IPS).

The first example will detect SSH failed or bad login attempts and blacklist the
corresponding source IP addresses.

The second example will detect Apache2 abusive documents fetch attempts and
blacklist the corresponding source IP addresses.

Both examples will make use of iptables 'recent' module, which (according to
'man iptables-extensions'):
"Allows you to dynamically create a list of IP addresses and then match against
 that list in a few different ways. For example, you can create a "badguy" list
 out of people attempting to connect to port 139 on your firewall and then DROP
 all future packets from them without considering them."


SSH
---

The first step is to create an ad-hoc iptables 'recent' destination:

  # Stateful firewalling
  iptables \
    --table filter --append INPUT \
    --match state --state ESTABLISHED,RELATED \
    --jump ACCEPT
  iptables \
    --table filter --append INPUT \
    --match state --state INVALID
    --jump DROP

  # SSH abusers blacklist (10 hits in the last 24h -> block!)
  iptables \
    --table filter --append INPUT \
    --match recent --name IPS_SSH --rcheck --seconds 86400 --hitcount 10 \
    --jump DROP

And then the corresponding Log Watcher Daemon configuration:

  [SSH]
  # Watch the machine authentication logs
  producer = Tail?file=/var/log/auth.log
  # Look for failed or bad login attempts
  filters = Grep?pattern=Failed password for .* from (%{ip})&group=1, Grep?pattern=Invalid user .* from (%{ip})&group=1, Grep?pattern=User .* from (%{ip}) not allowed&group=1, Grep?pattern=&group=1
  # Add offending IPs to our iptables 'recent' IPS_SSH blacklist,
  # using the '+' prefix ('%2B' once URL encoded)
  consumers = Write?file=/proc/net/xt_recent/IPS_SSH&truncate&prefix=%2B

That's it!


Apache2
-------

Once again, the first step is to create ad-hoc iptables 'recent' destinations:

  # Stateful firewalling
  iptables \
    --table filter --append INPUT \
    --match state --state ESTABLISHED,RELATED \
    --jump ACCEPT
  iptables \
    --table filter --append INPUT \
    --match state --state INVALID
    --jump DROP

  # Apache2 robots blacklist (1 hit in the last 24h -> block!)
  iptables \
    --table filter --append INPUT \
    --match recent --name IPS_HTTP_ROBOTS --rcheck --seconds 86400 --hitcount 1 \
    --jump DROP

  # Apache2 abusers blacklist (100 hits in the last 24h -> block!)
  iptables \
    --table filter --append INPUT \
    --match recent --name IPS_HTTP_40X --rcheck --seconds 86400 --hitcount 100 \
    --jump DROP

We must also have Apache2 log its activity in a more parsing-friendly format:

  # In /etc/apache2/apache2.conf
  # Use '|' as field separator in access logs
  LogFormat "[access]|%{%FT%T%z}t|%>s|%b|%D|%a|%u|%m|%v|%p|\"%U\"|\"%q\"|\"%{Referer}i\"|\"%{User-Agent}i\"" awk_friendly
  CustomLog /var/log/apache2/awk_friendly.log awk_friendly

And finally the corresponding Log Watcher Daemon configuration:

  [Apache2_Robots]
  # Watch Apache2 access logs (parser-friendly formatted)
  producer = Tail?file=/var/log/apache2/awk_friendly.log
  # Look for robots
  filters = Awk?separator=|&input=11&pattern=/robots.txt&output=6, Awk?separator=|&input=14&pattern=(bot|spider|crawler)&ignorecase&output=6
  # Add offending IPs to our iptables 'recent' IPS_HTTP_ROBOTS blacklist,
  # using the '+' prefix ('%2B' once URL encoded)
  consumers = Write?file=/proc/net/xt_recent/IPS_HTTP_ROBOTS&truncate&prefix=%2B

  [Apache2_40X]
  # Watch Apache2 access logs (parser-friendly formatted)
  producer = Tail?file=/var/log/apache2/awk_friendly.log
  # Look for 403 or 404 status codes
  filters = Awk?separator=|&input=3&pattern=^40[34]$&output=6
  # Add offending IPs to our iptables 'recent' IPS_HTTP_40X blacklist,
  # using the '+' prefix ('%2B' once URL encoded)
  consumers = Write?file=/proc/net/xt_recent/IPS_HTTP_40X&truncate&prefix=%2B

That's it!
